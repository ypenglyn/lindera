name: Release

on:
  workflow_dispatch:
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    name: Build
    strategy:
      # max-parallel: 1
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
        toolchain: [stable]
        feature: ["default", "ipadic", "ko-dic", "cc-cedict"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      # - name: Install packages for Linux
      #   if : matrix.target == 'x86_64-unknown-linux-gnu'
      #   run: |
      #     sudo apt install -y liblzma-dev
      - name: Cache ~/.cargo/registry
        uses: actions/cache@v3.0.4
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache ~/.cargo/git
        uses: actions/cache@v3.0.4
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache target
        uses: actions/cache@v3.0.4
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Build
        uses: actions-rs/cargo@v1.0.1
        with:
          command: build
          args: --release --features "${{ matrix.feature }}" --target=${{ matrix.target }} --target-dir=target/${{ matrix.feature }}
          use-cross: false
      - name: Create artifact for Linux
        if: matrix.os == 'ubuntu-latest'
        run: |
          zip --junk-paths lindera-${{ matrix.feature }}-${{ matrix.target }}.zip \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-ipadic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-unidic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-ko-dic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-cc-cedict-builder
      - name: Create artifact for Windows
        if: matrix.os == 'windows-latest'
        run: |
          powershell Compress-Archive -DestinationPath lindera-${{ matrix.feature }}-${{ matrix.target }}.zip -Path target/${{ matrix.feature }}/${{ matrix.target }}/release/*.exe
      - name: Create artifact for OSX
        if: matrix.os == 'macos-latest'
        run: |
          zip --junk-paths lindera-${{ matrix.feature }}-${{ matrix.target }}.zip \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-ipadic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-unidic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-ko-dic-builder \
            target/${{ matrix.feature }}/${{ matrix.target }}/release/lindera-cc-cedict-builder
      - name: Upload artifact
        uses: actions/upload-artifact@v2.3.1
        with:
          name: build-${{ matrix.feature }}-${{ matrix.target }}
          path: lindera-${{ matrix.feature }}-${{ matrix.target }}.zip

  create-release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    steps:
      - name: Create release
        uses: actions/create-release@v1.1.4
        id: create-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Create release_upload_url.txt
        run: |
          echo '${{ steps.create-release.outputs.upload_url }}' > release_upload_url.txt
      - name: Upload release_upload_url.txt
        uses: actions/upload-artifact@v2.3.1
        with:
          name: create-release
          path: release_upload_url.txt

  upload-release:
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        feature: ["default", "ipadic", "ko-dic", "cc-cedict"]
    name: Upload Release
    needs: [create-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download release_upload_url.txt
        uses: actions/download-artifact@v1
        with:
          name: create-release
      - id: upload-url
        run: |
          echo "::set-output name=url::$(cat create-release/release_upload_url.txt)"
      - name: Download artifact
        uses: actions/download-artifact@v1
        with:
          name: build-${{ matrix.feature }}-${{ matrix.target }}
      - name: Upload release assets
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.upload-url.outputs.url }}
          asset_path: ./build-${{ matrix.feature }}-${{ matrix.target }}/lindera-${{ matrix.feature }}-${{ matrix.target }}.zip
          asset_name: lindera-${{ matrix.feature }}-${{ matrix.target }}.zip
          asset_content_type: application/zip

  publish-crates:
    name: Publish crate
    strategy:
      matrix:
        os: [ubuntu-latest]
        toolchain: [stable]
    needs: [upload-release]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Publish crate
        run: |
          LINDERA_CORE_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-core") | .version')
          LINDERA_CORE_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-core | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CORE_VERSIONS} | grep ${LINDERA_CORE_VERSION} >/dev/null; then
            echo "lindera-core ${LINDERA_CORE_VERSION} has already published"
          else
            pushd lindera-core
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_DECOMPRESS_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-decompress") | .version')
          LINDERA_DECOMPRESS_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-decompress | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_DECOMPRESS_VERSIONS} | grep ${LINDERA_DECOMPRESS_VERSION} >/dev/null; then
            echo "lindera-decompress ${LINDERA_DECOMPRESS_VERSION} has already published"
          else
            pushd lindera-decompress
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_COMPRESS_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-compress") | .version')
          LINDERA_COMPRESS_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-compress | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_COMPRESS_VERSIONS} | grep ${LINDERA_COMPRESS_VERSION} >/dev/null; then
            echo "lindera-compress ${LINDERA_COMPRESS_VERSION} has already published"
          else
            pushd lindera-compress
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_IPADIC_BUILDER_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ipadic-builder") | .version')
          LINDERA_IPADIC_BUILDER_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ipadic-builder | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_IPADIC_BUILDER_VERSIONS} | grep ${LINDERA_IPADIC_BUILDER_VERSION} >/dev/null; then
            echo "lindera-ipadic-builder ${LINDERA_IPADIC_BUILDER_VERSION} has already published"
          else
            pushd lindera-ipadic-builder
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_IPADIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ipadic") | .version')
          LINDERA_IPADIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ipadic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_IPADIC_VERSIONS} | grep ${LINDERA_IPADIC_VERSION} >/dev/null; then
            echo "lindera-ipadic ${LINDERA_IPADIC_VERSION} has already published"
          else
            pushd lindera-ipadic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_UNIDIC_BUILDER_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-unidic-builder") | .version')
          LINDERA_UNIDIC_BUILDER_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-unidic-builder | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_UNIDIC_BUILDER_VERSIONS} | grep ${LINDERA_UNIDIC_BUILDER_VERSION} >/dev/null; then
            echo "lindera-unidic-builder ${LINDERA_UNIDIC_BUILDER_VERSION} has already published"
          else
            pushd lindera-unidic-builder
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_UNIDIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-unidic") | .version')
          LINDERA_UNIDIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-unidic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_UNIDIC_VERSIONS} | grep ${LINDERA_UNIDIC_VERSION} >/dev/null; then
            echo "lindera-unidic ${LINDERA_UNIDIC_VERSION} has already published"
          else
            pushd lindera-unidic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_KO_DIC_BUILDER_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ko-dic-builder") | .version')
          LINDERA_KO_DIC_BUILDER_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ko-dic-builder | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_KO_DIC_BUILDER_VERSIONS} | grep ${LINDERA_KO_DIC_BUILDER_VERSION} >/dev/null; then
            echo "lindera-ko-dic-builder ${LINDERA_KO_DIC_BUILDER_VERSION} has already published"
          else
            pushd lindera-ko-dic-builder
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_KO_DIC_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-ko-dic") | .version')
          LINDERA_KO_DIC_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-ko-dic | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_KO_DIC_VERSIONS} | grep ${LINDERA_KO_DIC_VERSION} >/dev/null; then
            echo "lindera-ko-dic ${LINDERA_KO_DIC_VERSION} has already published"
          else
            pushd lindera-ko-dic
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_CC_CEDICT_BUILDER_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-cc-cedict-builder") | .version')
          LINDERA_CC_CEDICT_BUILDER_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-cc-cedict-builder | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CC_CEDICT_BUILDER_VERSIONS} | grep ${LINDERA_CC_CEDICT_BUILDER_VERSION} >/dev/null; then
            echo "lindera-cc-cedict-builder ${LINDERA_CC_CEDICT_BUILDER_VERSION} has already published"
          else
            pushd lindera-cc-cedict-builder
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_CC_CEDICT_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-cc-cedict") | .version')
          LINDERA_CC_CEDICT_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-cc-cedict | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CC_CEDICT_VERSIONS} | grep ${LINDERA_CC_CEDICT_VERSION} >/dev/null; then
            echo "lindera-cc-cedict ${LINDERA_CC_CEDICT_VERSION} has already published"
          else
            pushd lindera-cc-cedict
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_DICTIONARY_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-dictionary") | .version')
          LINDERA_DICTIONARY_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-dictionary | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_DICTIONARY_VERSIONS} | grep ${LINDERA_DICTIONARY_VERSION} >/dev/null; then
            echo "lindera-dictionary ${LINDERA_DICTIONARY_VERSION} has already published"
          else
            pushd lindera-dictionary
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera") | .version')
          LINDERA_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_VERSIONS} | grep ${LINDERA_VERSION} >/dev/null; then
            echo "lindera ${LINDERA_VERSION} has already published"
          else
            pushd lindera
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi
          sleep 20
          LINDERA_CLI_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera-cli") | .version')
          LINDERA_CLI_VERSIONS=$(curl -s -XGET https://crates.io/api/v1/crates/lindera-cli | jq -r 'select(.versions != null) | .versions[].num')
          if echo ${LINDERA_CLI_VERSIONS} | grep ${LINDERA_CLI_VERSION} >/dev/null; then
            echo "lindera-cli ${LINDERA_CLI_VERSION} has already published"
          else
            pushd lindera-cli
            cargo publish --token ${{ secrets.CRATES_TOKEN }}
            popd
          fi

  push-container:
    name: Push Docker container
    strategy:
      matrix:
        os: [ ubuntu-latest ]
        toolchain: [stable]
    needs: [publish-crates]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ matrix.toolchain }}
          override: true
      - name: Fetch latest version
        run: |
          LINDERA_VERSION=$(cargo metadata --no-deps --format-version=1 | jq -r '.packages[] | select(.name=="lindera") | .version')
          echo "LINDERA_VERSION=${LINDERA_VERSION}" >> $GITHUB_ENV
      - name: Setup QUME
        uses: docker/setup-qemu-action@v1
      - name: Setup Docker build environment
        uses: docker/setup-buildx-action@v1
      - name: Docker login
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build Docker image
        uses: docker/build-push-action@v2
        with:
          push: true
          build-args: |
            LINDERA_VERSION=${{ env.LINDERA_VERSION }}
          tags: |
            linderamorphology/lindera:latest
            linderamorphology/lindera:${{ env.LINDERA_VERSION }}
